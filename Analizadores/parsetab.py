
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AND_OP ASIGNACION_HASH BOOLEAN BREAK CASE CLASS COMA CORCHETE_DER CORCHETE_IZQ DEF DEFINED DIFERENTE DIVISION ELSE END ENTERO FLOAT FOR IF IGUAL IGUAL_COMPARACION IN LLAVE_DER LLAVE_IZQ MAS MAYOR_IGUAL MAYOR_QUE MENOR_IGUAL MENOR_QUE MENOS MODULE MODULO MULTIPLICACION NEGACION NEXT NOMBRE_CLASE NOT OR OR_OP PAREN_DER PAREN_IZQ POTENCIA PRINT PUNTO REDO RESCUE RETRY RETURN SELF STRING THEN TOKEN_CONSTANTE TOKEN_NOMBRE_FUNCION TOKEN_VARIABLE_DE_CLASE TOKEN_VARIABLE_GLOBAL TOKEN_VARIABLE_INSTANCIA TOKEN_VARIABLE_LOCAL UNDEF UNLESS UNTIL WHEN WHILEcuerpo : cuerpoF\n    | funcioncuerpoF : asignacion\n    | impresionasignacion : variable IGUAL valorvariable : TOKEN_VARIABLE_GLOBAL\n    | TOKEN_VARIABLE_INSTANCIA\n    | TOKEN_VARIABLE_LOCAL\n    | TOKEN_CONSTANTE\n    | TOKEN_VARIABLE_DE_CLASEvalor : ENTERO\n    | STRING\n    | FLOAT\n    | BOOLEAN\n    | variablefuncion : DEF TOKEN_NOMBRE_FUNCION PAREN_IZQ parametro PAREN_DER cuerpoFparametro : variable\n    | variable COMA parametro\n    impresion : PRINT valor'
    
_lr_action_items = {'DEF':([0,],[6,]),'PRINT':([0,26,],[8,8,]),'TOKEN_VARIABLE_GLOBAL':([0,8,15,22,26,27,],[9,9,9,9,9,9,]),'TOKEN_VARIABLE_INSTANCIA':([0,8,15,22,26,27,],[10,10,10,10,10,10,]),'TOKEN_VARIABLE_LOCAL':([0,8,15,22,26,27,],[11,11,11,11,11,11,]),'TOKEN_CONSTANTE':([0,8,15,22,26,27,],[12,12,12,12,12,12,]),'TOKEN_VARIABLE_DE_CLASE':([0,8,15,22,26,27,],[13,13,13,13,13,13,]),'$end':([1,2,3,4,5,9,10,11,12,13,16,17,18,19,20,21,23,28,],[0,-1,-2,-3,-4,-6,-7,-8,-9,-10,-19,-11,-12,-13,-14,-15,-5,-16,]),'TOKEN_NOMBRE_FUNCION':([6,],[14,]),'IGUAL':([7,9,10,11,12,13,],[15,-6,-7,-8,-9,-10,]),'ENTERO':([8,15,],[17,17,]),'STRING':([8,15,],[18,18,]),'FLOAT':([8,15,],[19,19,]),'BOOLEAN':([8,15,],[20,20,]),'COMA':([9,10,11,12,13,25,],[-6,-7,-8,-9,-10,27,]),'PAREN_DER':([9,10,11,12,13,24,25,29,],[-6,-7,-8,-9,-10,26,-17,-18,]),'PAREN_IZQ':([14,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'cuerpoF':([0,26,],[2,28,]),'funcion':([0,],[3,]),'asignacion':([0,26,],[4,4,]),'impresion':([0,26,],[5,5,]),'variable':([0,8,15,22,26,27,],[7,21,21,25,7,25,]),'valor':([8,15,],[16,23,]),'parametro':([22,27,],[24,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> cuerpoF','cuerpo',1,'p_cuerpo','analizadorSintactico.py',12),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','analizadorSintactico.py',13),
  ('cuerpoF -> asignacion','cuerpoF',1,'p_cuerpoF','analizadorSintactico.py',17),
  ('cuerpoF -> impresion','cuerpoF',1,'p_cuerpoF','analizadorSintactico.py',18),
  ('asignacion -> variable IGUAL valor','asignacion',3,'p_asignacion','analizadorSintactico.py',24),
  ('variable -> TOKEN_VARIABLE_GLOBAL','variable',1,'p_variable','analizadorSintactico.py',28),
  ('variable -> TOKEN_VARIABLE_INSTANCIA','variable',1,'p_variable','analizadorSintactico.py',29),
  ('variable -> TOKEN_VARIABLE_LOCAL','variable',1,'p_variable','analizadorSintactico.py',30),
  ('variable -> TOKEN_CONSTANTE','variable',1,'p_variable','analizadorSintactico.py',31),
  ('variable -> TOKEN_VARIABLE_DE_CLASE','variable',1,'p_variable','analizadorSintactico.py',32),
  ('valor -> ENTERO','valor',1,'p_valor','analizadorSintactico.py',36),
  ('valor -> STRING','valor',1,'p_valor','analizadorSintactico.py',37),
  ('valor -> FLOAT','valor',1,'p_valor','analizadorSintactico.py',38),
  ('valor -> BOOLEAN','valor',1,'p_valor','analizadorSintactico.py',39),
  ('valor -> variable','valor',1,'p_valor','analizadorSintactico.py',40),
  ('funcion -> DEF TOKEN_NOMBRE_FUNCION PAREN_IZQ parametro PAREN_DER cuerpoF','funcion',6,'p_funcion','analizadorSintactico.py',45),
  ('parametro -> variable','parametro',1,'p_parametro','analizadorSintactico.py',49),
  ('parametro -> variable COMA parametro','parametro',3,'p_parametro','analizadorSintactico.py',50),
  ('impresion -> PRINT valor','impresion',2,'p_impresion','analizadorSintactico.py',56),
]
